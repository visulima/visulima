// eslint-disable-next-line import/no-extraneous-dependencies
import ansiRegex from "ansi-regex";

/**
 * Regular expression for matching ANSI escape codes, generated by the `ansi-regex` package.
 * This regex is used by the {@link strip} function to remove ANSI codes from strings.
 * @see {@link https://github.com/chalk/ansi-regex ansi-regex repository}
 * @internal
 */
const regex = ansiRegex();

/**
 * Removes ANSI escape codes from a string.
 *
 * This function first removes OSC (Operating System Command) sequences like title strings
 * (e.g., `\u001B]0;title\u0007`) and then uses a comprehensive regex (from the `ansi-regex` package)
 * to strip all other ANSI escape codes.
 * @param input The string from which to remove ANSI escape codes.
 * @returns The input string with all ANSI escape codes stripped.
 * @example
 * ```typescript
 * import { strip } from "@visulima/ansi";
 *
 * const textWithAnsi = "\x1b[32mHello, \x1b[1mWorld!\x1b[0m";
 * const strippedText = strip(textWithAnsi);
 * console.log(strippedText); // Output: "Hello, World!"
 *
 * const titleSequence = "\u001B]0;My Window Title\u0007Some content";
 * const strippedTitle = strip(titleSequence);
 * console.log(strippedTitle); // Output: "Some content"
 * ```
 */
// eslint-disable-next-line no-control-regex,sonarjs/no-control-regex
const strip = (input: string): string => input.replace(/\u001B\]0;.*\u0007/, "").replace(regex, "");

export default strip;
