// eslint-disable-next-line import/no-unused-modules
import { mkdirSync, rmSync, writeFileSync } from "node:fs";
import { dirname, join, resolve } from "node:path";
import { fileURLToPath } from "node:url";

import UNICODE_MAP from "../data/transliteration.json" with { type: "json" };

/**
 * Checks if a character is Chinese.
 * @param {number} low - The Unicode code point of the character.
 * @returns {boolean} True if the character is Chinese, false otherwise.
 */
const isChinese = (low) => (low >= 0x4e && low <= 0x9f) || (low >= 0xf9 && low <= 0xfa);

const inputCharmapModulePath = "./src/charmap"; // Path for import
const outputDirectory = "./src/charmap"; // Output directory relative to project root
const mapFileName = "index.ts";
const oldCharmapFileToDelete = "./src/charmap.ts"; // Path relative to project root

// eslint-disable-next-line no-underscore-dangle
const __filename = fileURLToPath(import.meta.url);
// eslint-disable-next-line no-underscore-dangle
const __dirname = dirname(__filename);
const projectRoot = resolve(join(__dirname, "..")); // Assumes script is in project root

const outputDirectoryPath = join(projectRoot, outputDirectory);
const mapFilepath = join(outputDirectoryPath, mapFileName);
const oldCharmapFilepath = join(projectRoot, oldCharmapFileToDelete);

// eslint-disable-next-line func-style
async function runSplit() {
    // eslint-disable-next-line no-console
    console.log(`Attempting to import UNICODE_MAP from: ${inputCharmapModulePath}`);

    // eslint-disable-next-line no-console
    console.log(`Creating output directory: ${outputDirectoryPath}`);
    rmSync(outputDirectoryPath, { force: true, recursive: true });
    mkdirSync(outputDirectoryPath, { recursive: true });

    /**
     * @type {Array<{name: string, file: string, index: string}>}
     */
    const blockExports = [];

    Object.entries(UNICODE_MAP).forEach(([blockIndex, blockData]) => {
        if (!Array.isArray(blockData) || blockData.length === 0) {
            // eslint-disable-next-line no-console
            console.warn(`Skipping invalid block data at index ${blockIndex}.`);

            return;
        }

        const blockStart = (Number(blockIndex) * 256).toString(16).toUpperCase().padStart(4, "0");
        const blockEnd = (Number(blockIndex) * 256 + blockData.length - 1).toString(16).toUpperCase().padStart(4, "0"); // Use actual length
        const blockName = `UNICODE_BLOCK_${blockStart}_${blockEnd}`;
        const blockFilename = `block-${blockStart.toLowerCase()}-${blockEnd.toLowerCase()}.ts`;
        const blockFilepath = join(outputDirectoryPath, blockFilename);

        // eslint-disable-next-line no-loops/no-loops,no-plusplus
        for (let index = 0; index < blockData.length; index++) {
            // eslint-disable-next-line security/detect-object-injection
            const char = blockData[index];

            if (char === undefined || char === null || char === "") {
                // eslint-disable-next-line security/detect-object-injection,no-param-reassign
                blockData[index] = null;
            } else if (isChinese(Number(blockIndex))) {
                // eslint-disable-next-line security/detect-object-injection,no-param-reassign
                blockData[index] = char.trimEnd();
            }
        }

        // Format the array data for the TS file content
        const blockContentString = JSON.stringify(blockData, null, 4).replaceAll("null", "undefined"); // Convert null back to undefined if necessary

        const fileContent =
            "// This file is auto-generated by the generate-charmap.js script.\n// Do not edit this file manually.\n" +
            `// Block [${blockIndex}] 0x${blockIndex.toUpperCase().padStart(2, "0")} (U+${blockStart} to U+${blockEnd})\n` +
            `const ${blockName}: (string | undefined)[] = ${blockContentString};\n\nexport default Object.freeze(${blockName});\n`;

        try {
            // eslint-disable-next-line security/detect-non-literal-fs-filename
            writeFileSync(blockFilepath, fileContent, "utf8");

            // eslint-disable-next-line no-console
            console.log(`Created: ${blockFilename}`);

            blockExports.push({ file: `./${blockFilename.replace(".ts", "")}`, index: blockIndex, name: blockName });
        } catch (error) {
            // eslint-disable-next-line no-console
            console.error(`Error writing file ${blockFilename}:`, error);
        }
    });

    // eslint-disable-next-line no-console
    console.log(`Generating ${mapFileName}...`);

    const importStatements = blockExports.map((exp) => `import ${exp.name} from "${exp.file}";`).join("\n");
    const blockDataMapEntries = blockExports.map((exp) => `    '${exp.index}': ${exp.name}`).join(",\n");

    const mapFileContent = `// This file is auto-generated by the generate-charmap.js script.
// Do not edit this file manually.

import type { Charmap } from "../types";
${importStatements}

// Map block indices (as strings) to the imported block data arrays
const blockDataMap: Record<string, readonly (string | undefined)[]> = Object.freeze({
${blockDataMapEntries}
});

const generatedCharmap: Record<string, string | undefined> = {};

for (const blockIndexString in blockDataMap) {
    if (Object.prototype.hasOwnProperty.call(blockDataMap, blockIndexString)) {
        const blockData = blockDataMap[blockIndexString];

        if (blockData) {
            const baseCode = Number(blockIndexString) * 0x100;
            const blockLength = blockData.length;

            for (let charIndex = 0; charIndex < blockLength; charIndex++) {
                const replacement = blockData[charIndex];
                const charCode = baseCode + charIndex;
                const charCodeString = String(charCode);

                // Add entry if key doesn't exist, mapping null/undefined from JSON to undefined
                if (!Object.prototype.hasOwnProperty.call(generatedCharmap, charCodeString)) {
                    if (typeof replacement === "string") {
                        generatedCharmap[charCodeString] = replacement;
                    } else {
                        // Map null/undefined from JSON to undefined in the map
                        // This ensures the key exists for hasOwnProperty checks later
                        generatedCharmap[charCodeString] = undefined;
                    }
                }
            }
        }
    }
}

export default Object.freeze(generatedCharmap) as Charmap;
`;

    try {
        writeFileSync(mapFilepath, mapFileContent, "utf8");

        // eslint-disable-next-line no-console
        console.log(`Created: ${mapFileName}`);
    } catch (error) {
        // eslint-disable-next-line no-console
        console.error(`Error writing file ${mapFileName}:`, error);
    }

    // eslint-disable-next-line no-console
    console.log("\n--- Script Finished ---");
    // eslint-disable-next-line no-console
    console.log(`1. Verify the files generated in: ${outputDirectoryPath}`);
    // eslint-disable-next-line no-console
    console.log(`2. IMPORTANT: Manually delete the old file: ${oldCharmapFilepath}`);
    // eslint-disable-next-line no-console
    console.log(`3. Update imports in 'src/transliterate.ts' and tests to point to './charmap/map' if not already done.`);
    // eslint-disable-next-line no-console
    console.log(`4. Uncomment and adjust manual overrides in '${mapFileName}' if needed.`);
    // eslint-disable-next-line no-console
    console.log("5. Run tests for the package.");
}

// eslint-disable-next-line no-console,unicorn/prefer-top-level-await
runSplit().catch(console.error);
