// eslint-disable-next-line import/no-unused-modules
import { mkdirSync, rmSync, writeFileSync } from "node:fs";
import { dirname, join, resolve } from "node:path";
import { fileURLToPath } from "node:url";

import UNICODE_MAP from "../data/transliteration.json" with { type: "json" };

/**
 * Checks if a character is Chinese.
 * @param {number} blockIndex - The block index (not the code point itself here based on usage below)
 * @returns {boolean} True if the character is Chinese, false otherwise.
 */
// This function's parameter seems to be misinterpreted in original, should be actual char code for typical isChinese
// However, sticking to current script's logic where it passes blockIndex.
const isChinese = (blockIndex) => (blockIndex >= 0x4e && blockIndex <= 0x9f) || (blockIndex >= 0xf9 && blockIndex <= 0xfa);

const outputBaseDirectory = "./src/charmap"; // Base output directory
const blocksOutputDirectory = join(outputBaseDirectory, "blocks"); // Subdirectory for block files
const loaderFileName = "loader.ts"; // New loader file

// eslint-disable-next-line no-underscore-dangle
const __filename = fileURLToPath(import.meta.url);
// eslint-disable-next-line no-underscore-dangle
const __dirname = dirname(__filename);
const projectRoot = resolve(join(__dirname, ".."));

const outputBaseDirectoryPath = join(projectRoot, outputBaseDirectory);
const blocksOutputDirectoryPath = join(projectRoot, blocksOutputDirectory);
const loaderFilepath = join(outputBaseDirectoryPath, loaderFileName);

// eslint-disable-next-line func-style
async function runGenerate() {
    // eslint-disable-next-line no-console
    console.log(`Creating output directories: ${outputBaseDirectoryPath} and ${blocksOutputDirectoryPath}`);
    // Clear entire charmap directory first
    rmSync(outputBaseDirectoryPath, { force: true, recursive: true });
    mkdirSync(outputBaseDirectoryPath, { recursive: true });
    mkdirSync(blocksOutputDirectoryPath, { recursive: true });

    /**
     * @type {Array<string>}
     */
    const generatedUnicodeBlockMap = [];

    Object.entries(UNICODE_MAP).forEach(([blockIndexString, blockDataArray]) => {
        const blockIndex = Number(blockIndexString);
        if (!Array.isArray(blockDataArray) || blockDataArray.length === 0) {
            // eslint-disable-next-line no-console
            console.warn(`Skipping invalid block data at index ${blockIndexString}.`);
            return;
        }

        const blockStartCode = blockIndex * 256;
        const blockEndCode = blockStartCode + blockDataArray.length - 1;

        const blockStartHex = blockStartCode.toString(16).toUpperCase().padStart(4, "0");
        const blockEndHex = blockEndCode.toString(16).toUpperCase().padStart(4, "0");

        // Filename for direct import in transliterate.ts (without .ts)
        const blockFilenameForMap = `block-${blockStartHex.toLowerCase()}-${blockEndHex.toLowerCase()}`;
        const blockActualFilename = `${blockFilenameForMap}.ts`;
        const blockFilepath = join(blocksOutputDirectoryPath, blockActualFilename);

        /**
         * @type {Record<string, string | undefined>}
         */
        const blockCharmapObject = {};

        // eslint-disable-next-line no-loops/no-loops,no-restricted-syntax
        for (const [index, charReplacement] of blockDataArray.entries()) {
            const currentCodePoint = blockStartCode + index;

            if (charReplacement === undefined || charReplacement === null || charReplacement === "") {
                // Keep as undefined in the map, so Object.prototype.hasOwnProperty works
                blockCharmapObject[String(currentCodePoint)] = undefined;
            } else if (isChinese(blockIndex)) {
                    // Original logic used blockIndex here for isChinese
                    blockCharmapObject[String(currentCodePoint)] = charReplacement.trimEnd();
                } else {
                    blockCharmapObject[String(currentCodePoint)] = charReplacement;
                }
        }

        const blockContentString = JSON.stringify(blockCharmapObject, null, 4);

        const fileContent = `// This file is auto-generated by the generate-charmap.js script.\n// Do not edit this file manually.\n// Block ${blockIndexString} (U+${blockStartHex} to U+${blockEndHex})\nimport type { Charmap } from '../../types'; // Path to types relative to src/charmap/blocks/\n\nconst blockCharmap: Charmap = ${blockContentString};\n\nexport default Object.freeze(blockCharmap);\n`;

        try {
            // eslint-disable-next-line security/detect-non-literal-fs-filename
            writeFileSync(blockFilepath, fileContent, "utf8");
            // eslint-disable-next-line no-console
            console.log(`Created: ${blocksOutputDirectory}/${blockActualFilename}`);

            generatedUnicodeBlockMap.push(`    [0x${blockStartHex}, 0x${blockEndHex}, "${blockFilenameForMap}"]`);
        } catch (error) {
            // eslint-disable-next-line no-console
            console.error(`Error writing file ${blockActualFilename}:`, error);
        }
    });

    // eslint-disable-next-line no-console
    console.log(`Generating ${loaderFileName}...`);

    const loaderFileContent = `// This file is auto-generated by the generate-charmap.js script.\n// Do not edit this file manually.\n\nimport type { Charmap } from "../types"; // Path to types relative to src/charmap/\n\n// Example: Pre-load specific common blocks if desired\n// import latinBlock from './blocks/block-0000-007f'; // Adjust filename if needed\n// import latinSupplementBlock from './blocks/block-0080-00ff';\n\nexport const baseBlocksCharmap: Charmap = {\n    // ...(latinBlock || {}),\n    // ...(latinSupplementBlock || {}),\n    // Add more pre-loaded common blocks here by statically importing them from ./blocks/\n};\n\nexport const unicodeBlockMap: Array<[number, number, string]> = [\n${generatedUnicodeBlockMap.join(",\n")}\n];\n`;

    try {
        writeFileSync(loaderFilepath, loaderFileContent, "utf8");
        // eslint-disable-next-line no-console
        console.log(`Created: ${outputBaseDirectory}/${loaderFileName}`);
    } catch (error) {
        // eslint-disable-next-line no-console
        console.error(`Error writing file ${loaderFileName}:`, error);
    }

    // eslint-disable-next-line no-console
    console.log("\n--- Script Finished ---");
    // eslint-disable-next-line no-console
    console.log(`1. Verify files in: ${blocksOutputDirectoryPath} and ${loaderFilepath}`);
    // eslint-disable-next-line no-console
    console.log(`2. Update imports in 'src/transliterate.ts' to use './charmap/loader'.`);
    // eslint-disable-next-line no-console
    console.log("3. Update and run all tests and benchmarks.");
}

// eslint-disable-next-line no-console,unicorn/prefer-top-level-await
runGenerate().catch(console.error);
