import { describe, expect, it } from "vitest";
import type { OptionsTransliterate } from "../src/types";

import transliterate from "../src/transliterate";

describe("transliterate function", () => {
    it("should return empty string for empty input", () => {
        expect(transliterate("")).toBe("");
    });

    it("should handle basic Latin characters", () => {
        expect(transliterate("Cr√®me Br√ªl√©e")).toBe("Creme Brulee");
        expect(transliterate("Espa√±a")).toBe("Espana");
        expect(transliterate("stra√üe")).toBe("strasse");
    });

    it("should use unknown character for unmapped chars", () => {
        // Use characters highly unlikely to be in the charmap
        const unmappedStr = "\u{E000}\u{E001}üöÄ"; // PUA chars + emoji
        // With default unknown: ""
        expect(transliterate(unmappedStr)).toBe("");
        // With unknown: "?"
        expect(transliterate(unmappedStr, { unknown: "?" })).toBe("???");
    });

    it("should trim whitespace if trim option is true", () => {
        expect(transliterate("  hello world  ")).toBe("  hello world  ");
        expect(transliterate("  hello world  ", { trim: true })).toBe("hello world");
    });

    it("should handle ignore option", () => {
        expect(transliterate("Ignore C≈ìur but not c≈ìur", { ignore: ["C≈ìur"] })).toBe("Ignore C≈ìur but not coeur");
        expect(transliterate("Keep √©√†√ß√º√∂ ignored", { ignore: ["√©√†√ß√º√∂"] })).toBe("Keep √©√†√ß√º√∂ ignored");
    });

    it("should handle replace option (object)", () => {
        expect(transliterate("Replace ‚àö symbol", { replace: { "‚àö": "sqrt" } })).toBe("Replace sqrt symbol");
    });

    it("should handle replace option (array)", () => {
        expect(
            transliterate("Replace AB and XY", {
                replace: [
                    [/AB/g, "ab"],
                    ["XY", "xy"],
                ],
            }),
        ).toBe("Replace ab and xy");
    });

    it("should handle replaceAfter option", () => {
        expect(transliterate("cafe", { replaceAfter: { e: "√©" } })).toBe("caf√©");
        expect(transliterate("strasse", { replaceAfter: [[/ss/g, "√ü"]] })).toBe("stra√üe");
    });

    it("should handle combined options", () => {
        const text = "  Ignore C≈ìur, replace ‚àö with SQRT, then trim!  ";
        const options: OptionsTransliterate = {
            ignore: ["C≈ìur"],
            replace: { "‚àö": "SQRT" },
            replaceAfter: { SQRT: "Square Root" },
            trim: true,
            unknown: "?",
        };
        expect(transliterate(text, options)).toBe("Ignore C≈ìur, replace Square Root with Square Root, then trim!");
    });

    it("should optionally add space before non-punctuation after Chinese char", () => {
        const text = "‰∏≠Êñá√Ñ«ê«é";
        expect(transliterate(text, { fixChineseSpacing: true })).toBe("‰∏≠Êñá Aia");
        expect(transliterate(text, { fixChineseSpacing: false })).toBe("‰∏≠ÊñáAia");
        const textPunc = "‰∏≠Êñá√Ñ.";
        expect(transliterate(textPunc, { fixChineseSpacing: true })).toBe("‰∏≠Êñá A.");
    });
    describe("ASCII Purity Tests", () => {
        // Test characters 32-126 (Standard Printable ASCII) + Tab, LF, CR
        const printableAsciiTests: number[] = [9, 10, 13];
        for (let i = 32; i <= 126; i++) {
            printableAsciiTests.push(i);
        }

        printableAsciiTests.forEach((code) => {
            const char = String.fromCharCode(code);
            it(`should leave printable ASCII character ${code} (${JSON.stringify(char)}) unchanged`, () => {
                // Assuming these characters map to themselves in the real charmap
                expect(transliterate(char)).toBe(char);
            });
        });

        // Test characters 128-159 (C1 Controls) - Default Unknown
        const c1ControlTests: number[] = [];
        for (let i = 128; i <= 159; i++) {
            c1ControlTests.push(i);
        }

        c1ControlTests.forEach((code) => {
            const char = String.fromCharCode(code);
            // C1 controls are not mapped, should become default unknown ""
            it(`should map C1 control character ${code} to default unknown ('')`, () => {
                expect(transliterate(char)).toBe(""); // Default unknown is empty string
            });
        });

        // Test characters 128-159 (C1 Controls) - Specified Unknown
        c1ControlTests.forEach((code) => {
            const char = String.fromCharCode(code);
            // C1 controls are not mapped, should become specified unknown "?"
            it(`should map C1 control character ${code} to specified unknown ('?')`, () => {
                expect(transliterate(char, { unknown: "?" })).toBe("?");
            });
        });
    });

    describe("Basic String Tests", () => {
        const tests: (string | number)[] = [
            1 / 10, // 0.1
            "I like pie.",
            "\n",
            "\r\n",
            "I like pie.\n",
        ];

        tests.forEach((strInput) => {
            const str = String(strInput);
            it(`should handle basic input: ${JSON.stringify(str)}`, () => {
                expect(transliterate(str)).toBe(str);
            });
        });
    });

    describe("Complex Script/Character Tests", () => {
        // IMPORTANT: These tests depend heavily on the *actual* charmap data
        // in src/charmap.ts. They will likely fail or produce unexpected
        // results with the current placeholder/mocked charmap.
        const tests: [string, string][] = [
            ["√Üneid", "AEneid"],
            ["√©tude", "etude"],
            // Chinese depends entirely on charmap
            ["Âåó‰∫∞", "Bei Jing"], // Expectation based on original test
            // Canadian syllabics
            ["·îï·ìá·ìá", "shanana"],
            // Cherokee
            ["·èî·éµ·èÜ", "taliqua"],
            // Syriac
            ["‹¶‹õ‹Ω‹ê‹∫", "ptu'i"],
            // Devanagari
            ["‡§Ö‡§≠‡§ø‡§ú‡•Ä‡§§", "abhijiit"],
            // Bengali
            ["‡¶Ö‡¶≠‡¶ø‡¶ú‡ßÄ‡¶§", "abhijiit"],
            // Malayalam
            ["‡¥Ö‡¥≠‡¥ø‡¥ú‡µÄ‡¥§", "abhijiit"],
            ["‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≤‡¥Æ‡µç", "mlyaalm"],
            // Japanese
            ["„Åí„Çì„Åæ„ÅÑËå∂", "genmaiCha"],
            // Unknown characters (assuming they are not in the final charmap)
            [`\u0800\u1400${String.fromCharCode(0xd840, 0xdd00)}`, ""],
            ["üöÄ", ""], // Expect empty if unknown is default ""
        ];

        for (const [str, result] of tests) {
            it(`should transliterate ${str} to ${result} (charmap dependent)`, () => {
                // Add a comment reminding that this depends on the real charmap
                expect(transliterate(str)).toBe(result);
            });
        }

        it("should handle unknown chars with option", () => {
            expect(transliterate("üöÄ", { unknown: "?" })).toBe("?");
        });
    });

    it("- With replace / replaceAfter and ignore options combined", () => {
        expect(
            transliterate("‰Ω†Â•Ω, ‰∏ñÁïå!", {
                replace: [
                    ["‰Ω†Â•Ω", "Hola"],
                    ["‰∏ñÁïå", "mundo"],
                ],
                ignore: ["¬°", "!"],
            }),
        ).toBe("Hola, mundo!");

        // This test logic seems flawed from the original. `replaceAfter` happens *after* charmap.
        // If '‰Ω†' is ignored during charmap, it won't become 'Ni', so replaceAfter: [[/Ni/, 't√∫']] would be needed.
        // If '‰Ω†' is *not* ignored, it becomes 'Ni', then replaceAfter makes it 't√∫'.
        // Let's test the case where it's NOT ignored first by charmap (assuming ‰Ω†->Ni in real map)
        // We can't truly test this without the real map, let's adjust to test ignore+replaceAfter interaction
        expect(transliterate("‰Ω†Â•ΩÔºå‰∏ñÁïåÔºÅ", { replaceAfter: [["Ni", "t√∫"]], ignore: ["‰Ω†"] })).toBe("‰Ω†Â•ΩÔºå‰∏ñÁïåÔºÅ"); // Ignored ‰Ω† remains, replaceAfter Ni->t√∫ doesn't match

        // Test ignore with replace
        expect(
            transliterate("‰Ω†Â•ΩÔºå‰∏ñÁïåÔºÅ", {
                replace: { Â•Ω: "Good" },
                ignore: ["Áïå"],
            }),
        ).toBe("Ni GoodÔºåShi ÁïåÔºÅ"); // Assuming ‰Ω†->Ni, ‰∏ñ->Shi in real charmap
    });

    // --- Language Specific Tests ---

    it('supports German umlauts', () => {
        expect(transliterate('√§ √∂ √º √Ñ √ñ √ú √ü')).toBe('ae oe ue Ae Oe Ue ss');
    });

    it('supports Vietnamese', () => {
        expect(transliterate('·ªë ·ª™ ƒê')).toBe('o U D');
    });

    it('supports Arabic', () => {
        expect(transliterate('ÿ´ ÿ≥ Ÿà')).toBe('th s w');
    });

    it('supports Persian / Farsi', () => {
        expect(transliterate('⁄Ü €å Ÿæ')).toBe('ch y p');
    });

    it('supports Urdu', () => {
        expect(transliterate('Ÿπ ⁄à ⁄æ')).toBe('t d h');
    });

    it('supports Pashto', () => {
        expect(transliterate('⁄´ ⁄ì ⁄Ö')).toBe('g r c');
    });

    it('supports Russian', () => {
        expect(transliterate('–ñ –ø —é')).toBe('Zh p yu');
    });

    it('supports Romanian', () => {
        expect(transliterate('»ô »ö')).toBe('s T');
    });

    it('supports Turkish', () => {
        expect(transliterate('ƒ∞ ƒ± ≈û ≈ü √á √ß ƒû ƒü')).toBe('I i S s C c G g');
    });

    it('supports Armenian', () => {
        expect(transliterate('‘µ ÷Ä ÷á ’° ’∂')).toBe('Ye r yev a n');
    });

    it('supports Georgian', () => {
        expect(transliterate('·Éó ·Éû ·É¶')).toBe('t p gh');
    });

    it('supports Latin', () => {
        expect(transliterate('√Ñ √ê √ò')).toBe('Ae D O');
    });

    it('supports Czech', () => {
        expect(transliterate('ƒç ≈æ ≈á')).toBe('c z N');
    });

    it('supports Danish', () => {
        expect(transliterate('√¶ √∏ √• √Ü √ò √Ö')).toBe('ae oe aa Ae Oe Aa');
    });

    it('supports Dhivehi', () => {
        expect(transliterate('ﬁù ﬁì ﬁÑ')).toBe('sh t b');
    });

    it('supports Greek', () => {
        expect(transliterate('Œ∏ Œì Œû')).toBe('th G KS');
    });

    it('supports Hungarian', () => {
        expect(transliterate('≈± √∂ √ñ')).toBe('u o O');
    });

    it('supports Latvian', () => {
        expect(transliterate('ƒÅ ≈Ö ƒ¢')).toBe('a N G');
    });

    it('supports Lithuanian', () => {
        expect(transliterate('ƒÖ ƒØ ≈†')).toBe('a i S');
    });

    it('supports Macedonian', () => {
        expect(transliterate('–å —ô –¢—Å')).toBe('Kj lj Ts');
    });

    it('supports Polish', () => {
        expect(transliterate('ƒÖ ƒÑ ≈Å')).toBe('a A L');
    });

    it('supports Serbian', () => {
        expect(transliterate('—í —ü –Ç –â')).toBe('dj dz Dj Lj');
    });

    it('supports Slovak', () => {
        expect(transliterate('ƒæ ƒΩ ≈î')).toBe('l L R');
    });

    it('supports Swedish', () => {
        expect(transliterate('√§ √∂ √Ñ √ñ')).toBe('a o A O');
    });

    it('supports Ukrainian', () => {
        expect(transliterate('–Ñ “ê —ó')).toBe('Ye G yi');
    });

});
