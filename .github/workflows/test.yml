# https://help.github.com/en/categories/automating-your-workflow-with-github-actions

name: "Tests"

on: # yamllint disable-line rule:truthy
    # eslint-disable-next-line yml/no-empty-mapping-value
    pull_request: # yamllint disable-line rule:empty-values
        types: ["opened", "synchronize"]
    merge_group: # yamllint disable-line rule:empty-values

concurrency:
    group: "ci-tests-${{ github.ref }}-1"
    cancel-in-progress: true

permissions:
    contents: "read" # to fetch code (actions/checkout)

env:
    NX_CACHE: "cache-nx"

jobs:
    files-changed:
        name: "Detect what files changed"
        runs-on: "ubuntu-22.04"
        timeout-minutes: 3
        # Map a step output to a job output
        outputs:
            packages: "${{ steps.changes.outputs.packages }}"
        steps:
            - name: "Harden Runner"
              uses: "step-security/harden-runner@63c24ba6bd7ba022e95695ff85de572c04a18142" # v2.7.0
              with:
                  egress-policy: "audit"

            - name: "Git checkout"
              uses: "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11" # v4.1.1
              env:
                  GIT_COMMITTER_NAME: "GitHub Actions Shell"
                  GIT_AUTHOR_NAME: "GitHub Actions Shell"
                  EMAIL: "github-actions[bot]@users.noreply.github.com"

            - name: "Check for file changes"
              uses: "dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36" # v3.0.2
              id: "changes"
              with:
                  token: "${{ github.token }}"
                  filters: ".github/file-filters.yml"

    branch-info:
        if: "needs.files-changed.outputs.packages == 'true'"
        needs: "files-changed"
        runs-on: "ubuntu-latest"
        steps:
            - name: "Get branch name"
              id: "branch-name"
              uses: "tj-actions/branch-names@v5.2"
              # Get base branch name to compare with. Base branch on a PR, "main" branch on pushing.
            - name: "Get base branch name"
              id: "get-base-branch-name"
              run: |
                  if [[ "${{github.event.pull_request.base.ref}}" != "" ]]; then
                    echo "::set-output name=branch::${{github.event.pull_request.base.ref}}"
                  else
                    echo "::set-output name=branch::main"
                  fi
        outputs:
            base-branch-name: "${{ steps.get-base-branch-name.outputs.branch }}"
            branch-name: "${{ steps.branch-name.outputs.current_branch }}"

    get-affected:
        needs: "branch-info"
        runs-on: "ubuntu-latest"
        steps:
            - name: "Git checkout"
              uses: "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11" # v4.1.1
              env:
                  GIT_COMMITTER_NAME: "GitHub Actions Shell"
                  GIT_AUTHOR_NAME: "GitHub Actions Shell"
                  EMAIL: "github-actions[bot]@users.noreply.github.com"
              with:
                  fetch-depth: 0

            - name: "Derive appropriate SHAs for base and head for `nx affected` commands"
              uses: "nrwl/nx-set-shas@v2"
              with:
                  main-branch-name: "${{needs.branch-info.outputs.base-branch-name}}"

            - uses: "pnpm/action-setup@a3252b78c470c02df07e9d59298aecedc3ccdd6d" # v3.0.0
              with:
                  run_install: false

            - name: "Use Node.js 18.x"
              uses: "actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8" # v4.0.2
              with:
                  node-version: "18.x"
                  cache: "pnpm"

            - name: "Install packages"
              run: "pnpm install --frozen-lockfile --prefer-offline"
              env:
                  "PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD": 1
                  SKIP_CHECK: "true"

            - name: "Get affected"
              id: "get-projects-arrays"
              # When not in a PR and the current branch is main, pass --all flag. Otherwise pass the base branch
              run: |
                  if [[ "${{github.event.pull_request.base.ref}}" == "" && "${{needs.branch-info.outputs.branch-name}}" == "main" ]]; then
                    echo "::set-output name=test::$(node scripts/print-affected-array.js test:coverage --all)"
                  else
                    echo "::set-output name=test::$(node scripts/print-affected-array.js test:coverage origin/${{needs.branch-info.outputs.base-branch-name}})"
                  fi
        outputs:
            test: "${{ steps.get-projects-arrays.outputs.test }}"

    test:
        if: "${{ fromJson(needs.get-affected.outputs.test)[0] }}"
        needs: "get-affected"
        strategy:
            max-parallel: 2
            matrix:
                projectName: "${{fromJson(needs.get-affected.outputs.test)}}"
                os:
                    - "ubuntu-latest"
                node_version: ["18", "20", "21"]
                # On the other platforms, we only test the lts node version
                include:
                    - os: "macos-latest"
                      node_version: "20"
                    - os: "windows-latest"
                      node_version: "20.3.1" # https://github.com/nodejs/node/issues/48673
            fail-fast: false
        name: "Test ${{ matrix.projectName }} (node-${{ matrix.node_version }}, ${{ matrix.os }})"
        runs-on: "${{ matrix.os }}"
        env:
            NODE: "${{ matrix.node_version }}"
        steps:
            - name: "Harden Runner"
              uses: "step-security/harden-runner@63c24ba6bd7ba022e95695ff85de572c04a18142" # v2.7.0
              with:
                  egress-policy: "audit"

            - name: "Git checkout"
              uses: "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11" # v4.1.1
              env:
                  GIT_COMMITTER_NAME: "GitHub Actions Shell"
                  GIT_AUTHOR_NAME: "GitHub Actions Shell"
                  EMAIL: "github-actions[bot]@users.noreply.github.com"

            - uses: "pnpm/action-setup@a3252b78c470c02df07e9d59298aecedc3ccdd6d" # v3.0.0
              with:
                  run_install: false

            - name: "Set node version to ${{ matrix.node_version }}"
              uses: "actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8" # v4.0.2
              with:
                  node-version: "${{ matrix.node_version }}"
                  cache: "pnpm"

            - name: "Verify the integrity of provenance attestations and registry signatures for installed dependencies"
              run: "pnpm dlx audit-ci@^6 --config ./audit-ci.jsonc --report-type=summary"

            - name: "Check npm version"
              run: "npm -v"
              env:
                  SKIP_CHECK: "true"

            - name: "Cache Nx"
              uses: "actions/cache@ab5e6d0c87105b4c9c2047343972218f562e4319" # v4.0.1
              with:
                  path: "node_modules/.cache/nx"
                  key: "${{ env.NX_CACHE }}-${{ hashFiles('pnpm-lock.yaml') }}-${{ matrix.target }}-${{ matrix.index }}-${{ github.sha }}"
                  restore-keys: |
                      ${{ env.NX_CACHE }}-${{ hashFiles('pnpm-lock.yaml') }}-${{ matrix.target }}-${{ matrix.index }}-
                      ${{ env.NX_CACHE }}-${{ hashFiles('pnpm-lock.yaml') }}-
                      ${{ env.NX_CACHE }}-

            - name: "Install packages"
              run: "pnpm install --frozen-lockfile --prefer-offline"
              env:
                  "PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD": 1
                  SKIP_CHECK: "true"

            - name: "Build"
              run: "pnpm nx build ${{ matrix.projectName }}"

            - name: "Install Bun for tests"
              if: "matrix.os == 'ubuntu-latest'"
              run: "pnpm i -D bun --filter=package"

            - name: "test and coverage"
              run: "pnpm nx test:coverage ${{ matrix.projectName }}"

    # This check runs once all dependant jobs have passed
    # It symbolizes that all required Frontend checks have succesfully passed (Or skipped)
    # This check is the only required Github check
    test-required-check:
        needs: ["files-changed", "test"]
        name: "Check Test Run"
        # This is necessary since a failed/skipped dependent job would cause this job to be skipped
        if: "always() && (needs.test.result == 'success' || needs.test.result == 'skipped')"
        runs-on: "ubuntu-22.04"
        steps:
            # If any jobs we depend on fail, we will fail since this is a required check
            # NOTE: A timeout is considered a failure
            - name: "Harden Runner"
              uses: "step-security/harden-runner@63c24ba6bd7ba022e95695ff85de572c04a18142" # v2.7.0
              with:
                  egress-policy: "audit"

            - name: "Check for failures"
              if: "contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')"
              run: |
                  echo "One of the dependent jobs have failed. You may need to re-run it." && exit 1
