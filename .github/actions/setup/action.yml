name: "Setup Environment and Resources"
description: "Setup node.js and caching scoped within a workflow"

inputs:
    cwd:
        description: "Changes node's process.cwd() if the project is not located on the root. Default to process.cwd()"
        required: false
        default: "."
    enable-corepack:
        description: "Enable corepack"
        required: false
        default: "true"
    enable-nx-cache:
        description: "Enable nx cache"
        required: false
        default: "true"
    enable-node-modules-cache:
        description: "Cache node_modules, might speed up link step (invalidated lock/os/node-version/branch)"
        required: false
        default: "true"
    cache-prefix:
        description: "Add a specific cache-prefix"
        required: false
        default: "default"
    node-version:
        description: "The node.js version to use"
        required: false
        default: "18"
    npm-version:
        description: "The npm version to use"
        required: false
        default: "9.6.x"
    install-bun:
        description: "Install Bun for tests"
        required: false
        default: "false"
    skip-playwright:
        description: "Skip Playwright installation"
        required: false
        default: "true"
    install-cypress-binary:
        description: "Install Cypress Binary"
        required: false
        default: "false"

runs:
    using: "composite"
    steps:
        - name: "Enable Corepack"
          if: "inputs.enable-corepack == 'true'"
          shell: "bash"
          working-directory: "${{ inputs.cwd }}"
          run: "corepack enable"

        - name: "Setup pnpm"
          uses: "pnpm/action-setup@a3252b78c470c02df07e9d59298aecedc3ccdd6d" # v3.0.0
          with:
              run_install: false

        - name: 'Expose pnpm config(s) through "$GITHUB_OUTPUT"' # yamllint disable-line rule:quoted-strings
          id: "pnpm-config"
          shell: "bash"
          run: |
              echo "STORE_PATH=$(pnpm store path | tr -d '\n')" >> $GITHUB_OUTPUT
              echo "CURRENT_BRANCH=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's,/,-,g')" >> $GITHUB_OUTPUT

        - name: "Set node version to ${{ inputs.node-version }}"
          uses: "actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8" # v4.0.2
          with:
              node-version: "${{ inputs.node-version }}"

        # @see: npm install -g npm@latest is necessary to make provenance available. More info: https://docs.npmjs.com/generating-provenance-statements
        - name: "Upgrade npm to ${{ inputs.npm-version }} version"
          shell: "bash"
          run: "npm install --global npm@${{ inputs.npm-version }}"
          env:
              SKIP_CHECK: "true"

        - name: "Check npm version"
          shell: "bash"
          run: "npm -v"
          env:
              SKIP_CHECK: "true"

        - name: "Cache rotation keys"
          id: "cache-rotation"
          shell: "bash"
          run: |
              echo "YEAR_MONTH=$(/bin/date -u "+%Y%m")" >> $GITHUB_OUTPUT

        - name: "Setup pnpm cache"
          uses: "actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9" # v4.0.2
          id: "pnpm-store-cache"
          with:
              path: "${{ steps.pnpm-config.outputs.STORE_PATH }}"
              key: "${{ runner.os }}-pnpm-store-cache-${{ steps.cache-rotation.outputs.YEAR_MONTH }}-${{ hashFiles('**/pnpm-lock.yaml') }}"
              restore-keys: |
                  ${{ runner.os }}-pnpm-store-cache-${{ steps.cache-rotation.outputs.YEAR_MONTH }}-

        - name: "Download and build lz4"
          if: "runner.os == 'Windows'"
          shell: "powershell"
          run: |
              Invoke-WebRequest https://github.com/lz4/lz4/releases/download/v1.9.4/lz4_win64_v1_9_4.zip -OutFile lz4-1.9.4.zip
              Expand-Archive -Path ".\lz4-1.9.4.zip" -DestinationPath ".\lz4-1.9.4" -Force

              echo "$((Get-Item .).FullName)\lz4-1.9.4" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

        - name: "Check for node_modules cache"
          if: "inputs.enable-node-modules-cache == 'true'"
          id: "node-modules-cache"
          uses: "actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9" # v4.0.2
          with:
              path: "/tmp/node_modules.tar.lz4"
              key: "pnpm-nm-cache-${{ inputs.cache-prefix }}-${{ runner.os }}-${{ inputs.node-version }}-${{ hashFiles('**/pnpm-lock.yaml') }}"
              restore-keys: |
                  pnpm-nm-cache-${{ inputs.cache-prefix }}-${{ runner.os }}-${{ inputs.node-version }}-

        - name: "Restore node_modules"
          if: "inputs.enable-node-modules-cache == 'true' && steps.node-modules-cache.outputs.cache-hit == 'true'"
          shell: "bash"
          run: "lz4 -d /tmp/node_modules.tar.lz4 | tar -xf - ;" # decompress node_modules

        - name: "Check for Nx cache"
          if: "inputs.enable-nx-cache == 'true'"
          id: "nx-cache"
          uses: "actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9" # v4.0.2
          with:
              path: "/tmp/nx_cache.tar.lz4"
              key: "cache-nx-${{ inputs.cache-prefix }}-${{ runner.os }}-${{ inputs.node-version }}-${{ hashFiles('pnpm-lock.yaml') }}-${{ github.sha }}"
              restore-keys: |
                  cache-nx-${{ inputs.cache-prefix }}-${{ runner.os }}-${{ inputs.node-version }}-${{ hashFiles('pnpm-lock.yaml') }}-
                  cache-nx-${{ inputs.cache-prefix }}-${{ runner.os }}-${{ inputs.node-version }}-

        - name: "Restore node_modules"
          if: "inputs.enable-node-modules-cache == 'true' && steps.nx-cache.outputs.cache-hit == 'true'"
          shell: "bash"
          run: "lz4 -d /tmp/nx_cache.tar.lz4 | tar -xf - ;" # decompress nx cache

        - name: "Verify the integrity of provenance attestations and registry signatures for installed dependencies"
          shell: "bash"
          run: "pnpm run audit --report-type=summary"

        - name: "Install packages"
          shell: "bash"
          run: "pnpm install --frozen-lockfile --prefer-offline"
          env:
              "PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD": "${{ inputs.skip-playwright }}"
              "CYPRESS_INSTALL_BINARY": "${{ inputs.install-cypress-binary }}"
              "SKIP_CHECK": "true" # is used to skip the check for the node version
              "HUSKY": 0 # disable husky hooks on ci

        - name: "Install Bun for tests"
          if: "inputs.install-bun == 'true'"
          shell: "bash"
          run: "pnpm i -D bun --filter=package"

        - name: "Prepare node_modules cache"
          if: "inputs.enable-node-modules-cache == 'true'"
          shell: "bash"
          run: "tar -cf - node_modules | lz4 > /tmp/node_modules.tar.lz4" # compress node_modules
